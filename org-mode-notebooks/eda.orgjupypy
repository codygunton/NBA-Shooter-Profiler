* Imports

#+begin_src jupyter-python :results none
import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import re
#+end_src

Set up seaborn
#+begin_src jupyter-python :results none
sns.set(context="notebook",
  rc={"font.size":12, "font.family":"sans-serif", 
      "font.serif":"P052", # note: kills the original list font.serif
      "axes.titlesize":"large", "axes.titlepad":20, 
      "axes.titleweight":"bold",
      "axes.labelsize":"medium", "axes.labelpad":10, 
      "axes.labelweight":"light",  # lighter is not actually an option
      "xtick.labelsize":"small", "ytick.labelsize":"small", 
#      "axes.facecolor":"white", # vertical axis padding is werid with this
      "legend.fontsize": "medium",
      "xtick.major.width":3, "ytick.major.width":3,
      "legend.loc":"best",
      "figure.dpi":200, "figure.titlesize":"large", 
      "figure.titleweight":"bold"
  }
)

context: "notebook"
#+end_src

#+begin_src jupyter-python 
df = pd.read_csv("../data/shot_logs.csv")
df
#+end_src

#+RESULTS:
:RESULTS:
|        | GAME_ID  | MATCHUP                  | LOCATION | W   | FINAL_MARGIN | SHOT_NUMBER | PERIOD | GAME_CLOCK | SHOT_CLOCK | DRIBBLES | ... | SHOT_DIST | PTS_TYPE | SHOT_RESULT | CLOSEST_DEFENDER  | CLOSEST_DEFENDER_PLAYER_ID | CLOSE_DEF_DIST | FGM | PTS | player_name   | player_id |
|--------+----------+--------------------------+----------+-----+--------------+-------------+--------+------------+------------+----------+-----+-----------+----------+-------------+-------------------+----------------------------+----------------+-----+-----+---------------+-----------|
| 0      | 21400899 | MAR 04, 2015 - CHA @ BKN | A        | W   | 24           | 1           | 1      | 1:09       | 10.8       | 2        | ... | 7.7       | 2        | made        | Anderson, Alan    | 101187                     | 1.3            | 1   | 2   | brian roberts | 203148    |
| 1      | 21400899 | MAR 04, 2015 - CHA @ BKN | A        | W   | 24           | 2           | 1      | 0:14       | 3.4        | 0        | ... | 28.2      | 3        | missed      | Bogdanovic, Bojan | 202711                     | 6.1            | 0   | 0   | brian roberts | 203148    |
| 2      | 21400899 | MAR 04, 2015 - CHA @ BKN | A        | W   | 24           | 3           | 1      | 0:00       | NaN        | 3        | ... | 10.1      | 2        | missed      | Bogdanovic, Bojan | 202711                     | 0.9            | 0   | 0   | brian roberts | 203148    |
| 3      | 21400899 | MAR 04, 2015 - CHA @ BKN | A        | W   | 24           | 4           | 2      | 11:47      | 10.3       | 2        | ... | 17.2      | 2        | missed      | Brown, Markel     | 203900                     | 3.4            | 0   | 0   | brian roberts | 203148    |
| 4      | 21400899 | MAR 04, 2015 - CHA @ BKN | A        | W   | 24           | 5           | 2      | 10:34      | 10.9       | 2        | ... | 3.7       | 2        | missed      | Young, Thaddeus   | 201152                     | 1.1            | 0   | 0   | brian roberts | 203148    |
| ...    | ...      | ...                      | ...      | ... | ...          | ...         | ...    | ...        | ...        | ...      | ... | ...       | ...      | ...         | ...               | ...                        | ...            | ... | ... | ...           | ...       |
| 128064 | 21400006 | OCT 29, 2014 - BKN @ BOS | A        | L   | -16          | 5           | 3      | 1:52       | 18.3       | 5        | ... | 8.7       | 2        | missed      | Smart, Marcus     | 203935                     | 0.8            | 0   | 0   | jarrett jack  | 101127    |
| 128065 | 21400006 | OCT 29, 2014 - BKN @ BOS | A        | L   | -16          | 6           | 4      | 11:28      | 19.8       | 4        | ... | 0.6       | 2        | made        | Turner, Evan      | 202323                     | 0.6            | 1   | 2   | jarrett jack  | 101127    |
| 128066 | 21400006 | OCT 29, 2014 - BKN @ BOS | A        | L   | -16          | 7           | 4      | 11:10      | 23.0       | 2        | ... | 16.9      | 2        | made        | Thornton, Marcus  | 201977                     | 4.2            | 1   | 2   | jarrett jack  | 101127    |
| 128067 | 21400006 | OCT 29, 2014 - BKN @ BOS | A        | L   | -16          | 8           | 4      | 2:37       | 9.1        | 4        | ... | 18.3      | 2        | missed      | Bradley, Avery    | 202340                     | 3.0            | 0   | 0   | jarrett jack  | 101127    |
| 128068 | 21400006 | OCT 29, 2014 - BKN @ BOS | A        | L   | -16          | 9           | 4      | 0:12       | NaN        | 5        | ... | 5.1       | 2        | made        | Bradley, Avery    | 202340                     | 2.3            | 1   | 2   | jarrett jack  | 101127    |

128069 rows × 21 columns
:END:

* How many games did each team play?

The GAME_ID is formatted in one of two ways, depending ont the value of LOCATION:
  - AWAY @ HOME if the game was a home game for the player (i.e., LOCATION=H)
  - HOME vs. AWAY if the game was an away game for the player (i.e., LOCATION=A)
Therefore, the team of the shooter in question is always listed first.

We find of the distinct values GAME_ID and record the corresponding matchup.


#+begin_src jupyter-python
# The away team takes a shot in every game, 
so we can throw out half of the entries.
ddf = df[df.LOCATION=="A"]
ddf = ddf.assign(AWAY_TEAM=lambda ddf: ddf.MATCHUP.apply(lambda s: s[-9:-6]))
ddf = ddf.assign(HOME_TEAM=lambda ddf: ddf.MATCHUP.apply(lambda s: s[-3:]))
ddf = ddf[["GAME_ID", "AWAY_TEAM", "HOME_TEAM"]].drop_duplicates()
print(ddf)
print(f"Compare with df.GAME_ID.nunique() = {df.GAME_ID.nunique()}").
#+end_src

#+RESULTS:
#+begin_example
         GAME_ID AWAY_TEAM HOME_TEAM
0       21400899       CHA       BKN
13      21400882       CHA       ORL
14      21400859       CHA       BOS
19      21400845       CHA       CHI
27      21400827       CHA       DAL
...          ...       ...       ...
124505  21400374       BKN       TOR
124668  21400033       BKN       DET
124675  21400006       BKN       BOS
124972  21400341       BKN       CHA
124994  21400320       BKN       CHI

[904 rows x 3 columns]
Cf with df.GAME_ID.nunique() = 904
#+end_example

Many games are missing. There are 82*30/2 = 1230 games in the regular season.

Aggregate by team
#+begin_src jupyter-python
# count games played by a given team with abbreviation ab
team_abbrevs = df.MATCHUP.apply(lambda s: s[-3:]).unique()
num_games = np.vectorize(lambda ab: ddf[(ddf.HOME_TEAM == ab) | (ddf.AWAY_TEAM == ab)].shape[0])
pd.DataFrame({"games_played": num_games(team_abbrevs)}, index=team_abbrevs).T
#+end_src

#+RESULTS:
:RESULTS:
|              | BKN | LAL | ORL | BOS | CHI | DAL | OKC | DET | IND | PHI | ... | MIL | UTA | PHX | MEM | ATL | GSW | POR | LAC | SAC | CHA |
|--------------+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----|
| games_played | 59  | 60  | 62  | 59  | 61  | 62  | 61  | 60  | 60  | 61  | ... | 60  | 60  | 62  | 60  | 60  | 59  | 59  | 62  | 59  | 59  |

1 rows × 30 columns
:END:


Find the dates of the games played.
#+begin_src jupyter-python
rgx = re.compile("^(.*\d{1})") # capture date part of the values of MATCHUP.
dates = df.MATCHUP.apply(lambda s: re.match(rgx, s).group(1)).drop_duplicates()
dates = pd.to_datetime(dates).to_frame() # sort and produce frame.
dates.sort_values(by="MATCHUP").reset_index(drop=True)
#+end_src

#+RESULTS:
:RESULTS:
|     | MATCHUP    |
|-----+------------|
| 0   | 2014-10-28 |
| 1   | 2014-10-29 |
| 2   | 2014-10-30 |
| 3   | 2014-10-31 |
| 4   | 2014-11-01 |
| ... | ...        |
| 115 | 2015-02-28 |
| 116 | 2015-03-01 |
| 117 | 2015-03-02 |
| 118 | 2015-03-03 |
| 119 | 2015-03-04 |

120 rows × 1 columns
:END:

* Correlations

We show the correlations between all of the revalant (dropping numerical ID's) variables across the entire dataset.


#+begin_src jupyter-python :file ../images/correlations-heatmap.png
drop_vars = ['GAME_ID', 'MATCHUP', 'LOCATION', 'W', 
             'FINAL_MARGIN', 'CLOSEST_DEFENDER', 
             'CLOSEST_DEFENDER_PLAYER_ID', 
             'player_name', 'player_id']
ddf = df.drop(drop_vars, axis=1)

_ = sns.heatmap(ddf.corr(), cmap="YlGnBu")
#+end_src

#+RESULTS:
[[file:../images/correlations-heatmap.png]]

We see a number of expected correlations. For example: 
  - There is a weak correlation between shot distance and closest defender distance. This is because challenging a player at the basket requires closer coverage than covering a player shooting from farther out.
  - We see a strong correlation between dribbles and touch time. This is because, in  This is to be expected, since, typically, longer touch times require more dribbles from the player, and, conversely, a larger number of dribbles tends to indicate a longer touch time.

For players near the basket (at least), it can happen that DRIBBLES and TOUCH_TIME
are less strongly correlated. E.g., Anthony Davis in losses, Tyson Chandler in wins.


#+begin_src jupyter-python :file ../images/stephen-curry-correlations-heatmap.png
def plot_player_heatmap(pname):
    ddf = df[(df.player_name==pname)]
    ddf =ddf.drop(drop_vars, axis=1)
    g = sns.heatmap(ddf.corr(), cmap="YlGnBu")
    _ = g.set_title(f"{pname.title()} Correlations Heatmap")
    return g

pname = "stephen curry"
plot_player_heatmap(pname)
#+end_src

#+RESULTS:
:RESULTS:
: <matplotlib.axes._subplots.AxesSubplot at 0x7fbfabd3bc10>
[[file:../images/stephen-curry-correlations-heatmap.png]]
:END:


#+begin_src jupyter-python :file ../images/deandre-jordan-correlations-heatmap.png
pname = "deandre jordan"
plot_player_heatmap(pname)
#+end_src

#+RESULTS:
[[file:../images/davis-correlations-heatmap.png]]

* Simple profile: dribbles before shots

A very simple characteristic of a player's shot profile is their tendency to take dribbles. For instance, some players tend to create shots for themselves by moving around with the ball, while others tend to move with the ball and shoot shortly after catching a pass. 

We compare James Harden, a player who frequently handles the ball for a long time before shooting, with Joe Ingles, who is more of a catch-and-shoot player. 

#+begin_src jupyter-python :results none
# Note: there is an error in the dataset: "jon ingles" is really "joe ingles"
# We will fix that here and again, alter, when we prepare the data for clustering.

def jon_to_joe(name):
    if name == "jon ingles":
        return "joe ingles"
    else:
        return name
df.player_name = df.player_name.apply(jon_to_joe)

players = ["james harden", "joe ingles"]
#+end_src


#+begin_src jupyter-python :file ../images/harden-ingles-overlap.png
def compare_dribbles(players, norm_hist = False):
    fig, ax = plt.subplots()

    list(map(lambda s: 
             sns.distplot(df[df.player_name==s].DRIBBLES, 
                          bins=range(31), kde=False, 
                          label=s.title(), norm_hist=norm_hist), 
             players))

    plt.xlabel('Dribbles')
    if norm_hist:
        plt.ylabel('%')
        title_string = "Percentage of shots taken after a given number of dribbles"
    else:
        plt.ylabel('Shots')
        title_string = "Number of shots taken after a given number of dribbles"
    plt.legend()
    
    plt.title(title_string)
compare_dribbles(players, norm_hist=False)
#+end_src

#+RESULTS:
[[file:../images/harden-ingles-overlap.png]]


#+begin_src jupyter-python :file ../images/harden-ingles-overlap-normalized.png
compare_dribbles(players, norm_hist=True)
#+end_src

#+RESULTS:
[[file:../images/harden-ingles-overlap-normalized.png]]

